/*
  Program generated by Fspher.nb
  Function works for m in [0,n] and n<=10
*/
double dFspher_costheta_le_sintheta(const int &n, const int &m, const double &theta) {

  double X[10], Y[10];

  if (n!=0) {

    std::sincos(theta, Y, X);
    for (int i = 1; i < n; ++i) {X[i]=X[i-1]*(*X); Y[i]=Y[i-1]*(*Y);}

  }

  switch (n) {
    case 0:
      switch (m) {
        case 0: return 0.0;
      }

    case 1:
      switch (m) {
        case 0: return -0.488602511902919922*Y[0];
        case 1: return -0.345494149471335479*X[0];
      }

    case 2:
      switch (m) {
        case 0: return -1.89234939151512004*X[0]*Y[0];
        case 1: return 0.772548404046379161*(1 - 2*X[1]);
        case 2: return 0.772548404046379161*X[0]*Y[0];
      }

    case 3:
      switch (m) {
        case 0: return 1.11952899777034617*(1 - 5*X[1])*Y[0];
        case 1: return 0.323180184114150653*X[0]*(11 - 15*X[1]);
        case 2: return 1.02198547643328236*(-1 + 3*X[1])*Y[0];
        case 3: return -1.25167147089835227*X[0]*Y[1];
      }

    case 4:
      switch (m) {
        case 0: return 2.11571093830408608*X[0]*(3 - 7*X[1])*Y[0];
        case 1: return -0.473087347878780009*(3 - 27*X[1] + 28*X[3]);
        case 2: return 1.33809308711457834*X[0]*(-4 + 7*X[1])*Y[0];
        case 3: return 1.25167147089835227*(1 - 5*X[1] + 4*X[3]);
        case 4: return 1.77013076977993053*X[0]*Y[2];
      }

    case 5:
      switch (m) {
        case 0: return -1.75425483680135395*(1 - 14*X[1] + 21*X[3])*Y[0];
        case 1: return -0.320281648576215128*X[0]*(29 + 21*X[1]*(-6 + 5*X[1]));
        case 2: return 1.69477118326089928*(1 - 12*X[1] + 15*X[3])*Y[0];
        case 3: return 1.03783115744052064*X[0]*(7 - 22*X[1] + 15*X[3]);
        case 4: return -1.46771489830575116*(1 - 6*X[1] + 5*X[3])*Y[0];
        case 5: return -2.3206610172042908*X[0]*Y[3];
      }

    case 6:
      switch (m) {
        case 0: return -2.66990649524039389*X[0]*(5 - 30*X[1] + 33*X[3])*Y[0];
        case 1: return 0.411975516301140777*(5 - 100*X[1] + 285*X[3] - 198*X[5]);
        case 2: return 0.651390485867715738*X[0]*(19 - 102*X[1] + 99*X[3])*Y[0];
        case 3: return 1.95417145760314721*(-1 + 16*X[1] - 37*X[3] + 22*X[5]);
        case 4: return -0.713562525707996055*X[0]*(13 - 46*X[1] + 33*X[3])*Y[0];
        case 5: return -1.6734524581000979*(-1 + 6*X[1])*Y[3];
        case 6: return 2.89850468148039736*X[0]*Y[4];
      }

    case 7:
      switch (m) {
        case 0: return -0.477989938384034593*(-5 + 135*X[1] - 495*X[3] + 429*X[5])*Y[0];
        case 1: return 0.0638740922770801477*X[0]*(275 - 2385*X[1] + 5049*X[3] - 3003*X[5]);
        case 2: return 0.156458933862294034*(-15 + 375*X[1] - 1265*X[3] + 1001*X[5])*Y[0];
        case 3: return -0.110633173111245658*X[0]*(141 - 902*X[1] + 1001*X[3])*Y[1];
        case 4: return 0.733857449152875582*(3 - 54*X[1] + 91*X[3])*Y[2];
        case 5: return -0.366928724576437791*X[0]*(-31 + 91*X[1])*Y[3];
        case 6: return 1.87097672671296874*(-1 + 7*X[1])*Y[4];
        case 7: return -3.50027694499385465*X[0]*Y[5];
      }

    case 8:
      switch (m) {
        case 0: return 0.654247475392679733*X[0]*(35 - 11*X[1]*(35 - 91*X[1] + 65*X[3]))*Y[0];
        case 1: return -0.0771038044040571207*(35 - 1225*X[1] + 6545*X[3] - 11011*X[5] + 5720*X[7]);
        case 2: return 1.29019342077153203*X[0]*(-17 + 176*X[1] - 429*X[3] + 286*X[5])*Y[0];
        case 3: return 2.62039522493914236*(1 - 31*X[1] + 147*X[3] - 221*X[5] + 104*X[7]);
        case 4: return 2.70633255111219638*X[0]*(7 - 52*X[1] + 65*X[3])*Y[2];
        case 5: return -2.43945519537307291*(1 - 21*X[1] + 40*X[3])*Y[3];
        case 6: return 4.51699330474193476*X[0]*(-3 + 10*X[1])*Y[4];
        case 7: return -2.06171593758913724*(-1 + 8*X[1])*Y[5];
        case 8: return 4.12343187517827448*X[0]*Y[6];
      }

    case 9:
      switch (m) {
        case 0: return -0.432289226897396623*(7 + 11*X[1]*(-28 + 182*X[1] - 364*X[3] + 221*X[5]))*Y[0];
        case 1: return -0.0455672854983032341*X[0]*(623 + 11*X[1]*(-812 + 3094*X[1] - 4316*X[3] + 1989*X[5]));
        case 2: return 0.427459028067230214*(7 - 294*X[1] + 1820*X[3] - 3458*X[5] + 1989*X[7])*Y[0];
        case 3: return -0.979431676305167708*X[0]*(-27 + 325*X[1] - 897*X[3] + 663*X[5])*Y[1];
        case 4: return -2.88336878334462108*(1 - 36*X[1] + 190*X[3] - 308*X[5] + 153*X[7])*Y[0];
        case 5: return -1.723142430557597*X[0]*(13 - 110*X[1] + 153*X[3])*Y[3];
        case 6: return 2.6694807746771774*(1 - 24*X[1] + 51*X[3])*Y[4];
        case 7: return -0.385306360964099774*X[0]*(-41 + 153*X[1])*Y[5];
        case 8: return 2.24670285555956489*(-1 + 9*X[1])*Y[6];
        case 9: return -4.76597647343204622*X[0]*Y[7];
      }

    case 10:
      switch (m) {
        case 0: return -0.555465941446196435*X[0]*(63 + 13*X[1]*(-84 + 378*X[1] - 612*X[3] + 323*X[5]))*Y[0];
        case 1: return 0.0529615994769031024*(63 + X[1]*(-3402 - 13*X[1]*(-2226 + 6552*X[1] - 7803*X[3] + 3230*X[5])));
        case 2: return 0.0917321811441094477*X[0]*(371 + 13*X[1]*(-476 + 2058*X[1] - 3196*X[3] + 1615*X[5]))*Y[0];
        case 3: return -0.467744181678242184*(7 - 343*X[1] + 2415*X[3] - 5117*X[5] + 3230*X[7])*Y[1];
        case 4: return 0.661490165450475055*X[0]*(-47 + 645*X[1] - 1989*X[3] + 1615*X[5])*Y[2];
        case 5: return -1.04590778631256119*(-3 + 120*X[1] - 595*X[3] + 646*X[5])*Y[3];
        case 6: return 0.233872090839121092*X[0]*(111 + 17*X[1]*(-62 + 95*X[1]))*Y[4];
        case 7: return -0.964279333413744709*(3 - 81*X[1] + 190*X[3])*Y[5];
        case 8: return 0.78733077879158932*X[0]*(-23 + 95*X[1])*Y[6];
        case 9: return -2.42671643887567141*(-1 + 10*X[1])*Y[7];
        case 10: return 5.42630291944221461*X[0]*Y[8];
      }

  }

  return 0.0;
}

long double dFspher_costheta_le_sintheta(const int &n, const int &m, const long double &theta) {

  long double X[10], Y[10];

  if (n!=0) {

    std::sincos(theta, Y, X);
    for (int i = 1; i < n; ++i) {X[i]=X[i-1]*(*X); Y[i]=Y[i-1]*(*Y);}

  }

  switch (n) {
    case 0:
      switch (m) {
        case 0: return 0.0L;
      }

    case 1:
      switch (m) {
        case 0: return -0.4886025119029199215864L*Y[0];
        case 1: return -0.3454941494713354792652L*X[0];
      }

    case 2:
      switch (m) {
        case 0: return -1.892349391515120036185L*X[0]*Y[0];
        case 1: return 0.7725484040463791606844L*(1 - 2*X[1]);
        case 2: return 0.7725484040463791606844L*X[0]*Y[0];
      }

    case 3:
      switch (m) {
        case 0: return 1.119528997770346174243L*(1 - 5*X[1])*Y[0];
        case 1: return 0.3231801841141506530074L*X[0]*(11 - 15*X[1]);
        case 2: return 1.021985476433282363396L*(-1 + 3*X[1])*Y[0];
        case 3: return -1.251671470898352269173L*X[0]*Y[1];
      }

    case 4:
      switch (m) {
        case 0: return 2.115710938304086076055L*X[0]*(3 - 7*X[1])*Y[0];
        case 1: return -0.4730873478787800090463L*(3 - 27*X[1] + 28*X[3]);
        case 2: return 1.338093087114578335904L*X[0]*(-4 + 7*X[1])*Y[0];
        case 3: return 1.251671470898352269173L*(1 - 5*X[1] + 4*X[3]);
        case 4: return 1.770130769779930531037L*X[0]*Y[2];
      }

    case 5:
      switch (m) {
        case 0: return -1.754254836801353946596L*(1 - 14*X[1] + 21*X[3])*Y[0];
        case 1: return -0.3202816485762151275372L*X[0]*(29 + 21*X[1]*(-6 + 5*X[1]));
        case 2: return 1.694771183260899275816L*(1 - 12*X[1] + 15*X[3])*Y[0];
        case 3: return 1.037831157440520639498L*X[0]*(7 - 22*X[1] + 15*X[3]);
        case 4: return -1.467714898305751163052L*(1 - 6*X[1] + 5*X[3])*Y[0];
        case 5: return -2.32066101720429080329L*X[0]*Y[3];
      }

    case 6:
      switch (m) {
        case 0: return -2.669906495240393889179L*X[0]*(5 - 30*X[1] + 33*X[3])*Y[0];
        case 1: return 0.4119755163011407774037L*(5 - 100*X[1] + 285*X[3] - 198*X[5]);
        case 2: return 0.6513904858677157375668L*X[0]*(19 - 102*X[1] + 99*X[3])*Y[0];
        case 3: return 1.9541714576031472127L*(-1 + 16*X[1] - 37*X[3] + 22*X[5]);
        case 4: return -0.7135625257079960552357L*X[0]*(13 - 46*X[1] + 33*X[3])*Y[0];
        case 5: return -1.673452458100097901243L*(-1 + 6*X[1])*Y[3];
        case 6: return 2.898504681480397361838L*X[0]*Y[4];
      }

    case 7:
      switch (m) {
        case 0: return -0.4779899383840345933627L*(-5 + 135*X[1] - 495*X[3] + 429*X[5])*Y[0];
        case 1: return 0.06387409227708014771226L*X[0]*(275 - 2385*X[1] + 5049*X[3] - 3003*X[5]);
        case 2: return 0.1564589338622940336467L*(-15 + 375*X[1] - 1265*X[3] + 1001*X[5])*Y[0];
        case 3: return -0.1106331731112456581898L*X[0]*(141 - 902*X[1] + 1001*X[3])*Y[1];
        case 4: return 0.733857449152875581526L*(3 - 54*X[1] + 91*X[3])*Y[2];
        case 5: return -0.366928724576437790763L*X[0]*(-31 + 91*X[1])*Y[3];
        case 6: return 1.870976726712968736762L*(-1 + 7*X[1])*Y[4];
        case 7: return -3.500276944993854648079L*X[0]*Y[5];
      }

    case 8:
      switch (m) {
        case 0: return 0.6542474753926797331563L*X[0]*(35 - 11*X[1]*(35 - 91*X[1] + 65*X[3]))*Y[0];
        case 1: return -0.07710380440405712065935L*(35 - 1225*X[1] + 6545*X[3] - 11011*X[5] + 5720*X[7]);
        case 2: return 1.290193420771532033293L*X[0]*(-17 + 176*X[1] - 429*X[3] + 286*X[5])*Y[0];
        case 3: return 2.620395224939142355331L*(1 - 31*X[1] + 147*X[3] - 221*X[5] + 104*X[7]);
        case 4: return 2.706332551112196378991L*X[0]*(7 - 52*X[1] + 65*X[3])*Y[2];
        case 5: return -2.439455195373072912414L*(1 - 21*X[1] + 40*X[3])*Y[3];
        case 6: return 4.516993304741934764634L*X[0]*(-3 + 10*X[1])*Y[4];
        case 7: return -2.0617159375891372389L*(-1 + 8*X[1])*Y[5];
        case 8: return 4.1234318751782744778L*X[0]*Y[6];
      }

    case 9:
      switch (m) {
        case 0: return -0.4322892268973966230321L*(7 + 11*X[1]*(-28 + 182*X[1] - 364*X[3] + 221*X[5]))*Y[0];
        case 1: return -0.04556728549830323414764L*X[0]*(623 + 11*X[1]*(-812 + 3094*X[1] - 4316*X[3] + 1989*X[5]));
        case 2: return 0.4274590280672302136148L*(7 - 294*X[1] + 1820*X[3] - 3458*X[5] + 1989*X[7])*Y[0];
        case 3: return -0.9794316763051677075087L*X[0]*(-27 + 325*X[1] - 897*X[3] + 663*X[5])*Y[1];
        case 4: return -2.883368783344621075758L*(1 - 36*X[1] + 190*X[3] - 308*X[5] + 153*X[7])*Y[0];
        case 5: return -1.723142430557596999423L*X[0]*(13 - 110*X[1] + 153*X[3])*Y[3];
        case 6: return 2.669480774677177403284L*(1 - 24*X[1] + 51*X[3])*Y[4];
        case 7: return -0.3853063609640997736719L*X[0]*(-41 + 153*X[1])*Y[5];
        case 8: return 2.246702855559564889651L*(-1 + 9*X[1])*Y[6];
        case 9: return -4.765976473432046215952L*X[0]*Y[7];
      }

    case 10:
      switch (m) {
        case 0: return -0.5554659414461964348565L*X[0]*(63 + 13*X[1]*(-84 + 378*X[1] - 612*X[3] + 323*X[5]))*Y[0];
        case 1: return 0.05296159947690310236924L*(63 + X[1]*(-3402 - 13*X[1]*(-2226 + 6552*X[1] - 7803*X[3] + 3230*X[5])));
        case 2: return 0.09173218114410944769075L*X[0]*(371 + 13*X[1]*(-476 + 2058*X[1] - 3196*X[3] + 1615*X[5]))*Y[0];
        case 3: return -0.4677441816782421841904L*(7 - 343*X[1] + 2415*X[3] - 5117*X[5] + 3230*X[7])*Y[1];
        case 4: return 0.6614901654504750554926L*X[0]*(-47 + 645*X[1] - 1989*X[3] + 1615*X[5])*Y[2];
        case 5: return -1.045907786312561188277L*(-3 + 120*X[1] - 595*X[3] + 646*X[5])*Y[3];
        case 6: return 0.2338720908391210920952L*X[0]*(111 + 17*X[1]*(-62 + 95*X[1]))*Y[4];
        case 7: return -0.9642793334137447090895L*(3 - 81*X[1] + 190*X[3])*Y[5];
        case 8: return 0.7873307787915893203985L*X[0]*(-23 + 95*X[1])*Y[6];
        case 9: return -2.426716438875671414852L*(-1 + 10*X[1])*Y[7];
        case 10: return 5.426302919442214607382L*X[0]*Y[8];
      }

  }

  return 0.0L;
}

#if defined(_QUAD)
quad dFspher_costheta_le_sintheta(const int &n, const int &m, const quad &theta) {

  quad X[10], Y[10];

  if (n!=0) {

    std::sincos(theta, Y, X);
    for (int i = 1; i < n; ++i) {X[i]=X[i-1]*(*X); Y[i]=Y[i-1]*(*Y);}

  }

  switch (n) {
    case 0:
      switch (m) {
        case 0: return 0.0Q;
      }

    case 1:
      switch (m) {
        case 0: return -0.4886025119029199215863846228383470046Q*Y[0];
        case 1: return -0.3454941494713354792652446460318896831Q*X[0];
      }

    case 2:
      switch (m) {
        case 0: return -1.89234939151512003618536214177426296Q*X[0]*Y[0];
        case 1: return 0.7725484040463791606843854706229778262Q*(1 - 2*X[1]);
        case 2: return 0.7725484040463791606843854706229778262Q*X[0]*Y[0];
      }

    case 3:
      switch (m) {
        case 0: return 1.119528997770346174243187739596991803Q*(1 - 5*X[1])*Y[0];
        case 1: return 0.3231801841141506530073941633302585841Q*X[0]*(11 - 15*X[1]);
        case 2: return 1.021985476433282363396114491700468591Q*(-1 + 3*X[1])*Y[0];
        case 3: return -1.251671470898352269173281047210177702Q*X[0]*Y[1];
      }

    case 4:
      switch (m) {
        case 0: return 2.115710938304086076055297943352897197Q*X[0]*(3 - 7*X[1])*Y[0];
        case 1: return -0.47308734787878000904634053544356574Q*(3 - 27*X[1] + 28*X[3]);
        case 2: return 1.338093087114578335904224779423811943Q*X[0]*(-4 + 7*X[1])*Y[0];
        case 3: return 1.251671470898352269173281047210177702Q*(1 - 5*X[1] + 4*X[3]);
        case 4: return 1.77013076977993053103683083262448605Q*X[0]*Y[2];
      }

    case 5:
      switch (m) {
        case 0: return -1.754254836801353946595727881354171233Q*(1 - 14*X[1] + 21*X[3])*Y[0];
        case 1: return -0.3202816485762151275371614328469480112Q*X[0]*(29 + 21*X[1]*(-6 + 5*X[1]));
        case 2: return 1.694771183260899275815691555510769158Q*(1 - 12*X[1] + 15*X[3])*Y[0];
        case 3: return 1.037831157440520639497899261297599635Q*X[0]*(7 - 22*X[1] + 15*X[3]);
        case 4: return -1.467714898305751163052026147528871839Q*(1 - 6*X[1] + 5*X[3])*Y[0];
        case 5: return -2.320661017204290803289993027669463258Q*X[0]*Y[3];
      }

    case 6:
      switch (m) {
        case 0: return -2.669906495240393889178735304543367252Q*X[0]*(5 - 30*X[1] + 33*X[3])*Y[0];
        case 1: return 0.4119755163011407774037479850727788164Q*(5 - 100*X[1] + 285*X[3] - 198*X[5]);
        case 2: return 0.6513904858677157375667952078996353257Q*X[0]*(19 - 102*X[1] + 99*X[3])*Y[0];
        case 3: return 1.954171457603147212700385623698905977Q*(-1 + 16*X[1] - 37*X[3] + 22*X[5]);
        case 4: return -0.7135625257079960552357343794943198111Q*X[0]*(13 - 46*X[1] + 33*X[3])*Y[0];
        case 5: return -1.673452458100097901242992085976027083Q*(-1 + 6*X[1])*Y[3];
        case 6: return 2.898504681480397361837766739412391571Q*X[0]*Y[4];
      }

    case 7:
      switch (m) {
        case 0: return -0.4779899383840345933627312462886761762Q*(-5 + 135*X[1] - 495*X[3] + 429*X[5])*Y[0];
        case 1: return 0.06387409227708014771225715573127928697Q*X[0]*(275 - 2385*X[1] + 5049*X[3] - 3003*X[5]);
        case 2: return 0.1564589338622940336466601309012722127Q*(-15 + 375*X[1] - 1265*X[3] + 1001*X[5])*Y[0];
        case 3: return -0.1106331731112456581898019270390303781Q*X[0]*(141 - 902*X[1] + 1001*X[3])*Y[1];
        case 4: return 0.7338574491528755815260130737644359195Q*(3 - 54*X[1] + 91*X[3])*Y[2];
        case 5: return -0.3669287245764377907630065368822179597Q*X[0]*(-31 + 91*X[1])*Y[3];
        case 6: return 1.870976726712968736761698224238043685Q*(-1 + 7*X[1])*Y[4];
        case 7: return -3.50027694499385464807933984831343596Q*X[0]*Y[5];
      }

    case 8:
      switch (m) {
        case 0: return 0.6542474753926797331562887134812978686Q*X[0]*(35 - 11*X[1]*(35 - 91*X[1] + 65*X[3]))*Y[0];
        case 1: return -0.07710380440405712065934817099569413841Q*(35 - 1225*X[1] + 6545*X[3] - 11011*X[5] + 5720*X[7]);
        case 2: return 1.290193420771532033292679563467153867Q*X[0]*(-17 + 176*X[1] - 429*X[3] + 286*X[5])*Y[0];
        case 3: return 2.620395224939142355330692272353809715Q*(1 - 31*X[1] + 147*X[3] - 221*X[5] + 104*X[7]);
        case 4: return 2.706332551112196378990528776794150104Q*X[0]*(7 - 52*X[1] + 65*X[3])*Y[2];
        case 5: return -2.439455195373072912413942750649892657Q*(1 - 21*X[1] + 40*X[3])*Y[3];
        case 6: return 4.516993304741934764633833983191090299Q*X[0]*(-3 + 10*X[1])*Y[4];
        case 7: return -2.061715937589137238900061517097635127Q*(-1 + 8*X[1])*Y[5];
        case 8: return 4.123431875178274477800123034195270255Q*X[0]*Y[6];
      }

    case 9:
      switch (m) {
        case 0: return -0.4322892268973966230320920749274235367Q*(7 + 11*X[1]*(-28 + 182*X[1] - 364*X[3] + 221*X[5]))*Y[0];
        case 1: return -0.04556728549830323414763759995698202081Q*X[0]*(623 + 11*X[1]*(-812 + 3094*X[1] - 4316*X[3] + 1989*X[5]));
        case 2: return 0.4274590280672302136147581203608627233Q*(7 - 294*X[1] + 1820*X[3] - 3458*X[5] + 1989*X[7])*Y[0];
        case 3: return -0.9794316763051677075086600098641822258Q*X[0]*(-27 + 325*X[1] - 897*X[3] + 663*X[5])*Y[1];
        case 4: return -2.88336878334462107575828035230041286Q*(1 - 36*X[1] + 190*X[3] - 308*X[5] + 153*X[7])*Y[0];
        case 5: return -1.723142430557596999422860345503045692Q*X[0]*(13 - 110*X[1] + 153*X[3])*Y[3];
        case 6: return 2.669480774677177403284318051687464733Q*(1 - 24*X[1] + 51*X[3])*Y[4];
        case 7: return -0.3853063609640997736718892525212360335Q*X[0]*(-41 + 153*X[1])*Y[5];
        case 8: return 2.246702855559564889650833827532072076Q*(-1 + 9*X[1])*Y[6];
        case 9: return -4.765976473432046215951697878229176537Q*X[0]*Y[7];
      }

    case 10:
      switch (m) {
        case 0: return -0.5554659414461964348564587182238819414Q*X[0]*(63 + 13*X[1]*(-84 + 378*X[1] - 612*X[3] + 323*X[5]))*Y[0];
        case 1: return 0.05296159947690310236924036110971153619Q*(63 + X[1]*(-3402 - 13*X[1]*(-2226 + 6552*X[1] - 7803*X[3] + 3230*X[5])));
        case 2: return 0.09173218114410944769075163422055448993Q*X[0]*(371 + 13*X[1]*(-476 + 2058*X[1] - 3196*X[3] + 1615*X[5]))*Y[0];
        case 3: return -0.4677441816782421841904245560595109213Q*(7 - 343*X[1] + 2415*X[3] - 5117*X[5] + 3230*X[7])*Y[1];
        case 4: return 0.6614901654504750554925501222494801262Q*X[0]*(-47 + 645*X[1] - 1989*X[3] + 1615*X[5])*Y[2];
        case 5: return -1.045907786312561188276870053735016927Q*(-3 + 120*X[1] - 595*X[3] + 646*X[5])*Y[3];
        case 6: return 0.2338720908391210920952122780297554606Q*X[0]*(111 + 17*X[1]*(-62 + 95*X[1]))*Y[4];
        case 7: return -0.9642793334137447090894870239870757481Q*(3 - 81*X[1] + 190*X[3])*Y[5];
        case 8: return 0.7873307787915893203984646698904207032Q*X[0]*(-23 + 95*X[1])*Y[6];
        case 9: return -2.426716438875671414852076751225263282Q*(-1 + 10*X[1])*Y[7];
        case 10: return 5.426302919442214607381833881851072394Q*X[0]*Y[8];
      }

  }

  return 0.0Q;
}

#endif // if defined(_QUAD)
